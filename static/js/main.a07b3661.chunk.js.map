{"version":3,"sources":["components/TopBarInfo/style.module.css","containers/Menu/style.module.css","components/SpaceShipSelectorItem/style.module.css","components/SpaceShipSelector/style.module.css","images/rocketone.png","images/rockettwo.png","store/index.js","components/SpaceShipSelectorItem/index.js","constants/objects.js","components/SpaceShipSelector/index.js","containers/Menu/index.js","constants/keyCodes.js","components/KeyboardListener/index.js","components/TopBarInfo/index.js","containers/Game/index.js","containers/ContainersController/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AppContext","createContext","spaceshipId","username","screen","setSpaceshipId","setUsername","setScreenGame","setScreenMenu","AppProvider","setState","state","Provider","value","this","props","children","Component","AppConsumer","Consumer","SpaceShipSelectorItem","isSelected","id","onClick","className","classes","style","wrapper","selected","image","backgroundImage","url","name","SPACESHIPS","require","SpaceShipSelector","map","spaceShip","key","Menu","appData","title","input","placeholder","onChange","e","target","type","button","length","alert","keyKodes","ARROW_DOWN","ARROW_UP","ARROW_LEFT","ARROW_RIGHT","ESCAPE","ENTER","SPACE","KeyboardListener","handleKeyDown","event","keyCode","Object","values","KeyCodes","includes","onKeyDown","document","addEventListener","removeEventListener","TopBarInfo","avatar","label","userName","find","spaceship","Game","console","log","ContainersController","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a07b3661.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"style_wrapper__3nIS9\",\"avatar\":\"style_avatar__23FnO\",\"label\":\"style_label__36Vzg\",\"userName\":\"style_userName__2Hqz6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"style_wrapper__Vwj0A\",\"title\":\"style_title__wc0QF\",\"input\":\"style_input__NDSgW\",\"button\":\"style_button__3Iiy2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"style_wrapper__2Z6a4\",\"selected\":\"style_selected__ajW3a\",\"image\":\"style_image__1Cx1N\",\"name\":\"style_name__3bAJA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"style_wrapper__HAptm\"};","module.exports = __webpack_public_path__ + \"static/media/rocketone.884f8fa0.png\";","module.exports = __webpack_public_path__ + \"static/media/rockettwo.3b15ccbd.png\";","import React, { createContext, Component } from 'react';\n\nconst AppContext = createContext({\n  spaceshipId: null,\n  username: '',\n  screen: 'menu',\n  setSpaceshipId: () => {},\n  setUsername: () => {},\n  setScreenGame: () => {},\n  setScreenMenu: () => {},\n});\n\nexport class AppProvider extends Component {\n  setUsername = username => {\n    this.setState({username});\n  };\n\n  setSpaceshipId = spaceshipId => {\n    this.setState({spaceshipId});\n  };\n  \n  setScreenGame = () => {\n    this.setState({screen: 'game'});\n  };\n\n  setScreenMenu = () => {\n    this.setState({screen: 'menu'});\n  };\n\n  state = {\n    spaceshipId: null,\n    username: '',\n    screen: 'menu',\n    setSpaceshipId: this.setSpaceshipId,\n    setUsername: this.setUsername,\n    setScreenGame: this.setScreenGame,\n    setScreenMenu: this.setScreenMenu,\n  };\n\n  render() {\n    return (\n      <AppContext.Provider value={this.state}>\n        {this.props.children}\n      </AppContext.Provider>\n    );\n  }\n}\n\nexport const AppConsumer = AppContext.Consumer;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport style from './style.module.css';\nimport { AppConsumer } from '../../store';\n\nimport * as classes from 'react-style-classes';\n\nconst SpaceShipSelectorItem = ({...props}) => (\n    <AppConsumer>\n        {value => {\n            const isSelected = props.id === value.spaceshipId;\n            \n            return (\n                <div\n                    onClick={() => value.setSpaceshipId(props.id)}\n                    className={classes(style.wrapper, isSelected && style.selected)}\n                >\n                    <div className={style.image} style={{backgroundImage: `url(${props.url})`}} />\n                    <span className={style.name}>\n                        {props.name}\n                    </span>\n                </div>\n            );\n        }}\n    </AppConsumer>\n    \n);\n\nSpaceShipSelectorItem.propTypes = {\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired,\n};\n\nexport default SpaceShipSelectorItem;","export const SPACESHIPS = [\n    {id: 1, url: require('../images/rocketone.png'), name: 'Rocket APOLLO'},\n    {id: 2, url: require('../images/rockettwo.png'), name: 'Rocket SATURN'},\n];","import React from 'react';\nimport style from './style.module.css';\nimport SpaceShipSelectorItem from '../SpaceShipSelectorItem';\nimport { SPACESHIPS } from '../../constants/objects';\n\nconst SpaceShipSelector = () => {\n\n    return (\n        <div className={style.wrapper}>\n            {SPACESHIPS.map(spaceShip => (\n                <SpaceShipSelectorItem\n                    key={spaceShip.id}\n                    id={spaceShip.id}\n                    url={spaceShip.url}\n                    name={spaceShip.name}\n                />\n            ))}\n        </div>\n    );\n};\n\nexport default SpaceShipSelector;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport style from './style.module.css';\nimport SpaceShipSelector from '../../components/SpaceShipSelector';\n\nconst Menu = ({appData}) => {\n    const onStart = () => {\n        if (appData.spaceshipId === null) {\n            alert(\"Please, select spaceship!\");\n            return;\n        }\n\n        if (appData.username.length === 0) {\n            alert(\"Please, insert your nickname!\");\n            return;\n        }\n\n        appData.setScreenGame();\n    }\n\n    return (\n        <div className={style.wrapper}>\n            <span className={style.title}>Select your Spaceship</span>\n            <SpaceShipSelector />\n            <input\n                className={style.input}\n                placeholder=\"Your nickname\"\n                onChange={e => appData.setUsername(e.target.value)}\n            />\n            <button\n                type=\"button\"\n                className={style.button}\n                onClick={onStart}\n            >\n                START!\n            </button>\n        </div>\n    );\n};\n\nMenu.propTypes = {\n    appData: PropTypes.object.isRequired,\n};\n\nexport default Menu;","const keyKodes = {\n    ARROW_DOWN: 40,\n    ARROW_UP: 38,\n    ARROW_LEFT: 37,\n    ARROW_RIGHT: 39,\n    ESCAPE: 27,\n    ENTER: 13,\n    SPACE: 32,\n};\n\nexport default keyKodes;","import { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { KeyCodes } from '../../constants';\n\nexport default class KeyboardListener extends Component {\n\n    static propTypes = {\n        onKeyDown: PropTypes.func.isRequired,\n    };\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleKeyDown);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleKeyDown);\n    }\n\n    handleKeyDown = event => {\n        const {keyCode} = event;\n        const allowedKeyCodes = Object.values(KeyCodes);\n\n        if (allowedKeyCodes.includes(keyCode)) {\n            this.props.onKeyDown(keyCode);\n        }\n        \n        return;\n    };\n\n    render() {\n        return this.props.children;\n    }\n\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport style from './style.module.css';\nimport { SPACESHIPS } from '../../constants/objects';\n\nconst TopBarInfo = ({username, spaceshipId}) => (\n    <div className={style.wrapper}>\n        <div className={style.avatar} />\n        <span className={style.label}>\n            COSMONAUT:\n            <span className={style.userName}>\n                {username}\n            </span>\n        </span>\n        <span className={style.label}>\n            SPACESHIP:\n            <span className={style.userName}>\n                {SPACESHIPS.find(spaceship => spaceship.id === spaceshipId).name}\n            </span>\n        </span>\n    </div>\n);\n\nTopBarInfo.propTypes = {\n    username: PropTypes.string.isRequired,\n    spaceshipId: PropTypes.number.isRequired,\n};\n\nexport default TopBarInfo;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport style from './style.module.css';\nimport KeyboardListener from '../../components/KeyboardListener';\nimport TopBarInfo from '../../components/TopBarInfo';\n\nconst Game = ({appData}) => {\n\n    const onKeyDown = keyCode => {\n        console.log(keyCode)\n    };\n\n    return (\n        <KeyboardListener onKeyDown={onKeyDown}>\n            <TopBarInfo username={appData.username} spaceshipId={appData.spaceshipId} />\n            <div>\n\n            </div>\n        </KeyboardListener>\n    );\n};\n\nGame.propTypes = {\n    appData: PropTypes.object.isRequired,\n};\n\nexport default Game;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Menu from '../Menu';\nimport Game from '../Game';\n\nconst ContainersController = ({appData}) => {\n    if (appData.screen === 'game') {\n        return (\n            <Game appData={appData} />\n        );\n    }\n    \n    return (\n        <Menu appData={appData} />\n    )\n};\n\nContainersController.propTypes = {\n    appData: PropTypes.object.isRequired,\n};\n\nexport default ContainersController;","import React from 'react';\nimport {AppConsumer} from './store';\nimport ContainersController from './containers/ContainersController';\n\nconst App = () => (\n  <div className=\"container\">\n    <AppConsumer>\n      {value => (\n        <ContainersController appData={value} />\n      )}\n    </AppConsumer>\n  </div>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { AppProvider } from './store';\n\nconst Application = () => (\n    <AppProvider>\n        <App />\n    </AppProvider>\n);\n\nReactDOM.render(<Application />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}