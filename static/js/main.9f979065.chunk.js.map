{"version":3,"sources":["containers/Menu/style.module.css","components/SpaceShipSelectorItem/style.module.css","components/SpaceShipSelector/style.module.css","images/rocketone.png","images/rockettwo.png","store/index.js","components/SpaceShipSelectorItem/index.js","constants/objects.js","components/SpaceShipSelector/index.js","containers/Menu/index.js","containers/ContainersController/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AppContext","createContext","AppProvider","state","Provider","value","this","props","children","Component","AppConsumer","Consumer","SpaceShipSelectorItem","className","style","wrapper","image","backgroundImage","url","name","SPACESHIPS","id","require","SpaceShipSelector","map","spaceShip","key","Menu","title","input","placeholder","required","type","button","ContainersController","appData","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wHACAA,EAAOC,QAAU,CAAC,QAAU,uBAAuB,MAAQ,qBAAqB,MAAQ,qBAAqB,OAAS,wB,gBCAtHD,EAAOC,QAAU,CAAC,QAAU,uBAAuB,MAAQ,qBAAqB,KAAO,sB,qBCAvFD,EAAOC,QAAU,CAAC,QAAU,yB,0ECD5BD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,qHCErCC,EAAaC,wBAAc,IAGpBC,EAAb,2MACEC,MAAQ,GADV,wEAKI,OACE,kBAACH,EAAWI,SAAZ,CAAqBC,MAAOC,KAAKH,OAC9BG,KAAKC,MAAMC,cAPpB,GAAiCC,aAapBC,EAAcV,EAAWW,S,uDCDvBC,EAbe,SAAC,GAAD,IAAKL,EAAL,yBAC1B,yBAAKM,UAAWC,IAAMC,SAClB,yBAAKF,UAAWC,IAAME,MAAOF,MAAO,CAACG,gBAAgB,OAAD,OAASV,EAAMW,IAAf,QACpD,0BAAML,UAAWC,IAAMK,MAAOZ,EAAMY,QCP/BC,EAAa,CACtB,CAACC,GAAI,EAAGH,IAAKI,EAAQ,IAA4BH,KAAM,iBACvD,CAACE,GAAI,EAAGH,IAAKI,EAAQ,IAA4BH,KAAM,kBCmB5CI,EAhBW,WAEtB,OACI,yBAAKV,UAAWC,IAAMC,SACjBK,EAAWI,KAAI,SAAAC,GAAS,OACrB,kBAAC,EAAD,CACIC,IAAKD,EAAUJ,GACfA,GAAII,EAAUJ,GACdH,IAAKO,EAAUP,IACfC,KAAMM,EAAUN,YCWrBQ,EArBF,WAET,OACI,yBAAKd,UAAWC,IAAMC,SAClB,0BAAMF,UAAWC,IAAMc,OAAvB,yBACA,kBAAC,EAAD,MACA,2BACIf,UAAWC,IAAMe,MACjBC,YAAY,gBACZC,UAAQ,IAEZ,4BACIC,KAAK,SACLnB,UAAWC,IAAMmB,QAFrB,YCAGC,EAXc,SAAC,GAAc,EAAbC,QAE3B,OACI,kBAAC,EAAD,OCOOC,EAVH,kBACV,yBAAKvB,UAAU,aACb,kBAACH,EAAD,MACG,SAAAL,GAAK,OACJ,kBAAC,EAAD,CAAsB8B,QAAS9B,SCInBgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCLNC,IAASC,OAAO,mBANI,kBAChB,kBAAC,EAAD,KACI,kBAAC,EAAD,SAIQ,MAAiBC,SAASC,eAAe,SDoHnD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9f979065.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"style_wrapper__Vwj0A\",\"title\":\"style_title__wc0QF\",\"input\":\"style_input__NDSgW\",\"button\":\"style_button__3Iiy2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"style_wrapper__2Z6a4\",\"image\":\"style_image__1Cx1N\",\"name\":\"style_name__3bAJA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"style_wrapper__HAptm\"};","module.exports = __webpack_public_path__ + \"static/media/rocketone.884f8fa0.png\";","module.exports = __webpack_public_path__ + \"static/media/rockettwo.3b15ccbd.png\";","import React, { createContext, Component } from 'react';\n\nconst AppContext = createContext({\n});\n\nexport class AppProvider extends Component {\n  state = {\n  };\n\n  render() {\n    return (\n      <AppContext.Provider value={this.state}>\n        {this.props.children}\n      </AppContext.Provider>\n    );\n  }\n}\n\nexport const AppConsumer = AppContext.Consumer;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport style from './style.module.css';\n\nconst SpaceShipSelectorItem = ({...props}) => (\n    <div className={style.wrapper}>\n        <div className={style.image} style={{backgroundImage: `url(${props.url})`}} />\n        <span className={style.name}>{props.name}</span>\n    </div>\n);\n\nSpaceShipSelectorItem.propTypes = {\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired,\n};\n\nexport default SpaceShipSelectorItem;","export const SPACESHIPS = [\n    {id: 1, url: require('../images/rocketone.png'), name: 'Rocket APOLLO'},\n    {id: 2, url: require('../images/rockettwo.png'), name: 'Rocket SATURN'},\n];","import React from 'react';\nimport style from './style.module.css';\nimport SpaceShipSelectorItem from '../SpaceShipSelectorItem';\nimport { SPACESHIPS } from '../../constants/objects';\n\nconst SpaceShipSelector = () => {\n\n    return (\n        <div className={style.wrapper}>\n            {SPACESHIPS.map(spaceShip => (\n                <SpaceShipSelectorItem\n                    key={spaceShip.id}\n                    id={spaceShip.id}\n                    url={spaceShip.url}\n                    name={spaceShip.name}\n                />\n            ))}\n        </div>\n    );\n};\n\nexport default SpaceShipSelector;","import React from 'react';\nimport style from './style.module.css';\nimport SpaceShipSelector from '../../components/SpaceShipSelector';\n\nconst Menu = () => {\n\n    return (\n        <div className={style.wrapper}>\n            <span className={style.title}>Select your Spaceship</span>\n            <SpaceShipSelector />\n            <input\n                className={style.input}\n                placeholder=\"Your nickname\"\n                required\n            />\n            <button\n                type=\"button\"\n                className={style.button}\n            >\n                START!\n            </button>\n        </div>\n    );\n};\n\nexport default Menu;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Menu from '../Menu';\n\nconst ContainersController = ({appData}) => {\n    \n    return (\n        <Menu />\n    )\n};\n\nContainersController.propTypes = {\n    appData: PropTypes.object.isRequired,\n};\n\nexport default ContainersController;","import React from 'react';\nimport {AppConsumer} from './store';\nimport ContainersController from './containers/ContainersController';\n\nconst App = () => (\n  <div className=\"container\">\n    <AppConsumer>\n      {value => (\n        <ContainersController appData={value} />\n      )}\n    </AppConsumer>\n  </div>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { AppProvider } from './store';\n\nconst Application = () => (\n    <AppProvider>\n        <App />\n    </AppProvider>\n);\n\nReactDOM.render(<Application />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}